import React, { useEffect, useState } from 'react';
import { View, Text, Button, TextInput, FlatList, StyleSheet, Modal, TouchableOpacity, ActivityIndicator, ScrollView } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import api from '../api';
import { useAuthModal } from '../AuthContext';
import { Picker } from '@react-native-picker/picker';

interface ProfileScreenProps {
  setIsAuthenticated?: (v: boolean) => void;
  navigation?: any;
  route?: any;
}

interface ProfileUser {
  id: number;
  name: string;
  email: string;
  address?: string;
}

export default function ProfileScreen({ setIsAuthenticated, navigation, route }: ProfileScreenProps) {
  const [showCreate, setShowCreate] = useState(false);
  const [showSupplyModal, setShowSupplyModal] = useState(false);
  const [adText, setAdText] = useState('');
  const [adPhone, setAdPhone] = useState('');
  const [ads, setAds] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [showModeration, setShowModeration] = useState(false);
  const [user, setUser] = useState<ProfileUser | null>(null);
  const { setShowAuthModal, setAuthMode, showAuthModal } = useAuthModal();
  const [showPersonalInfo, setShowPersonalInfo] = useState(false);
  const [editName, setEditName] = useState('');
  const [editEmail, setEditEmail] = useState('');
  const [editAddress, setEditAddress] = useState('');
  const [saving, setSaving] = useState(false);

  // --- ТОВАРЫ ---
  type Product = {
    id: number;
    name: string;
    categoryId: number;
    description: string;
    recommendations: string;
    price: number;
    stock: number;
    active: boolean;
  };

  const [products, setProducts] = useState<Product[]>([]);
  const [showProductModal, setShowProductModal] = useState(false);
  const [editProduct, setEditProduct] = useState<Product | null>(null);
  const [productName, setProductName] = useState('');
  const [productCategory, setProductCategory] = useState<number | null>(null);
  const [productDescription, setProductDescription] = useState('');
  const [productRecommendations, setProductRecommendations] = useState('');
  const [productPrice, setProductPrice] = useState('');
  const [productStock, setProductStock] = useState('0');
  const [productActive, setProductActive] = useState(true);
  const [categories, setCategories] = useState<{ id: number; name: string }[]>([]);

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const res = await api.get('/categories');
      setCategories(res.data);
    } catch {}
  };

  const fetchAds = async () => {
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) throw new Error('Нет токена');
      const res = await api.get('/ads/moderation');
      setAds(res.data);
    } catch (e: any) {
      setError(e.message || 'Ошибка загрузки объявлений');
    } finally {
      setLoading(false);
    }
  };

  const fetchUser = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        setUser(null);
        return;
      }
      const res = await api.get('/users');
      const tokenPayload = JSON.parse(atob(token.split('.')[1]));
      const currentUser = res.data.find((u: any) => u.email === tokenPayload.email);
      setUser(currentUser ? { ...currentUser, address: currentUser.address || '' } : null);
    } catch (e) {
      setUser(null);
    }
  };

  const fetchProducts = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token || !user) return;
      const res = await api.get('/products');
      setProducts(res.data.filter((p: any) => p.userId === user.id));
    } catch {}
  };

  useEffect(() => {
    fetchUser();
    fetchAds();
  }, []);

  useEffect(() => {
    if (!showAuthModal) {
      fetchUser();
    }
  }, [showAuthModal]);

  const handleCreate = async () => {
    setSubmitting(true);
    setError('');
    try {
      await api.post('/ads', { text: adText, phone: adPhone });
      setShowCreate(false);
      setAdText('');
      setAdPhone('');
      fetchAds();
    } catch (e: any) {
      setError(e.message || 'Ошибка создания объявления');
    } finally {
      setSubmitting(false);
    }
  };

  const handleApprove = async (id: number) => {
    await api.post(`/ads/${id}/approve`);
    fetchAds();
  };

  const handleReject = async (id: number) => {
    await api.post(`/ads/${id}/reject`);
    fetchAds();
  };

  const handleSavePersonalInfo = async () => {
    setSaving(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token || !user) throw new Error('Нет токена или пользователя');
      await api.put(`/users/${user.id}`, {
        name: editName,
        email: editEmail,
        address: editAddress,
      });
      setUser({ ...user, name: editName, email: editEmail, address: editAddress });
      setShowPersonalInfo(false);
    } catch (e) {
      // Можно добавить обработку ошибок
    } finally {
      setSaving(false);
    }
  };

  const openAddProduct = async () => {
    await fetchCategories();
    setEditProduct(null);
    setProductName('');
    setProductCategory(categories[0]?.id ?? null);
    setProductDescription('');
    setProductRecommendations('');
    setProductPrice('');
    setProductStock('0');
    setProductActive(true);
    setShowProductModal(true);
  };

  const openEditProduct = async (product: Product) => {
    await fetchCategories();
    setEditProduct(product);
    setProductName(product.name);
    setProductCategory(product.categoryId);
    setProductDescription(product.description);
    setProductRecommendations(product.recommendations);
    setProductPrice(product.price.toString());
    setProductStock(product.stock.toString());
    setProductActive(product.active);
    setShowProductModal(true);
  };

  const handleSaveProduct = async () => {
    if (!productName.trim() || !productCategory || !productPrice.trim()) {
      alert('Пожалуйста, заполните все обязательные поля: название, категория, цена.');
      return;
    }
    const productData = {
      name: productName,
      categoryId: productCategory,
      description: productDescription,
      recommendations: productRecommendations,
      price: Number(productPrice),
      stock: Number(productStock),
      active: productActive,
      userId: user?.id,
    };
    try {
      if (editProduct) {
        await api.put(`/products/${editProduct.id}`, productData);
      } else {
        await api.post('/products', productData);
      }
      setShowProductModal(false);
      fetchProducts();
    } catch (e: any) {
      alert(e.message || 'Ошибка сохранения товара');
    }
  };

  useEffect(() => {
    if (showPersonalInfo && user) {
      setEditName(user.name || '');
      setEditEmail(user.email || '');
      setEditAddress(user.address || '');
    }
  }, [showPersonalInfo, user]);

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#f5f5f5',
      padding: 16,
    },
    scrollContainer: {
      flexGrow: 1,
    },
    userCard: {
      backgroundColor: '#fff',
      borderRadius: 16,
      padding: 20,
      marginBottom: 16,
      elevation: 3,
      shadowColor: '#000',
      shadowOpacity: 0.1,
      shadowRadius: 8,
      shadowOffset: { width: 0, height: 2 },
    },
    menuItem: {
      backgroundColor: '#fff',
      borderRadius: 12,
      padding: 16,
      marginBottom: 12,
      flexDirection: 'row',
      alignItems: 'center',
      elevation: 2,
      shadowColor: '#000',
      shadowOpacity: 0.08,
      shadowRadius: 4,
      shadowOffset: { width: 0, height: 1 },
    },
    menuItemText: {
      fontSize: 16,
      color: '#1a1a1a',
      fontWeight: '500',
      flex: 1,
    },
    menuIcon: {
      width: 24,
      height: 24,
      marginRight: 12,
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: 12,
    },
    modalOverlay: {
      flex: 1,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      justifyContent: 'center',
      alignItems: 'center',
    },
    modalContent: {
      backgroundColor: '#fff',
      borderRadius: 16,
      padding: 20,
      width: '92%',
      maxWidth: 400,
      elevation: 6,
      shadowColor: '#000',
      shadowOpacity: 0.2,
      shadowRadius: 8,
      shadowOffset: { width: 0, height: 2 },
    },
    modalTitle: {
      fontSize: 20,
      fontWeight: 'bold',
      marginBottom: 16,
      color: '#1a1a1a',
    },
    input: {
      backgroundColor: '#f5f5f5',
      borderWidth: 1,
      borderColor: '#e0e0e0',
      borderRadius: 8,
      padding: 12,
      marginBottom: 16,
      fontSize: 16,
      width: '100%',
    },
    button: {
      backgroundColor: '#2196F3',
      borderRadius: 8,
      padding: 12,
      alignItems: 'center',
      elevation: 1,
      marginBottom: 8,
    },
    buttonText: {
      color: '#fff',
      fontSize: 16,
      fontWeight: '600',
    },
    buttonSecondary: {
      backgroundColor: '#e0e0e0',
    },
    buttonDanger: {
      backgroundColor: '#f44336',
    },
    adBlock: {
      backgroundColor: '#fff',
      borderRadius: 12,
      padding: 16,
      marginBottom: 12,
      elevation: 1,
      shadowColor: '#000',
      shadowOpacity: 0.06,
      shadowRadius: 3,
      shadowOffset: { width: 0, height: 1 },
    },
    approveBtn: {
      backgroundColor: '#4caf50',
      padding: 8,
      borderRadius: 6,
      marginRight: 10,
    },
    rejectBtn: {
      backgroundColor: '#f44336',
      padding: 8,
      borderRadius: 6,
    },
  });

  const renderMenuItem = (icon: string, text: string, onPress: () => void, color: string = '#e3f2fd') => (
    <TouchableOpacity style={styles.menuItem} onPress={onPress}>
      <View style={[styles.menuIcon, { backgroundColor: color }]}>
        <Text>{icon}</Text>
      </View>
      <Text style={styles.menuItemText}>{text}</Text>
    </TouchableOpacity>
  );

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.scrollContainer}>
      {/* User Card */}
      <View style={styles.userCard}>
        {user ? (
          <>
            <Text style={{ fontSize: 24, fontWeight: 'bold', color: '#1a1a1a', marginBottom: 4 }}>
              {user.name || 'Пользователь'}
            </Text>
            <Text style={{ fontSize: 14, color: '#666' }}>{user.email}</Text>
          </>
        ) : (
          <Text style={{ fontSize: 16, color: '#666' }}>
            {user === null ? 'Загрузка профиля...' : 'Пожалуйста, войдите в систему'}
          </Text>
        )}
      </View>

      {/* Menu Items */}
      {user ? (
        <>
          {renderMenuItem('👤', 'Личная информация', () => setShowPersonalInfo(true), '#e3f2fd')}
          {renderMenuItem('📝', 'Создать объявление', () => setShowCreate(true), '#e8f5e9')}
          {renderMenuItem('📋', 'Объявления на модерацию', () => setShowModeration(true), '#fff3e0')}
          {renderMenuItem('🛍️', 'Управление товарами', () => navigation.navigate('ProductManagementScreen'), '#f3e5f5')}
          {renderMenuItem('📦', 'Поставки', () => setShowSupplyModal(true), '#e0f7fa')}
          
          {renderMenuItem('🚪', 'Выйти', async () => {
            await AsyncStorage.removeItem('token');
            setUser(null);
            setShowAuthModal(true);
            setAuthMode('login');
            if (setIsAuthenticated) setIsAuthenticated(false);
          }, '#ffebee')}
        </>
      ) : (
        <>
          {renderMenuItem('🔑', 'Войти', () => {
            setAuthMode('login');
            setShowAuthModal(true);
          }, '#e3f2fd')}
          {renderMenuItem('✨', 'Зарегистрироваться', () => {
            setAuthMode('register');
            setShowAuthModal(true);
          }, '#e8f5e9')}
        </>
      )}

      {/* Modals */}
      <Modal visible={showPersonalInfo} animationType="slide" transparent>
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Личная информация</Text>
            <TextInput
              value={editName}
              onChangeText={setEditName}
              style={styles.input}
              placeholder="Имя"
            />
            <TextInput
              value={editEmail}
              onChangeText={setEditEmail}
              style={styles.input}
              placeholder="Email"
              autoCapitalize="none"
              keyboardType="email-address"
            />
            <TextInput
              value={editAddress}
              onChangeText={setEditAddress}
              style={styles.input}
              placeholder="Адрес"
            />
            <TouchableOpacity
              style={styles.button}
              onPress={handleSavePersonalInfo}
              disabled={saving}
            >
              <Text style={styles.buttonText}>{saving ? 'Сохранение...' : 'Сохранить'}</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.button, styles.buttonSecondary]}
              onPress={() => setShowPersonalInfo(false)}
            >
              <Text style={[styles.buttonText, { color: '#666' }]}>Отмена</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      <Modal visible={showCreate} animationType="slide" transparent>
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Новое объявление</Text>
            <TextInput
              placeholder="Текст объявления"
              value={adText}
              onChangeText={setAdText}
              style={styles.input}
              multiline
            />
            <TextInput
              placeholder="Номер телефона"
              value={adPhone}
              onChangeText={setAdPhone}
              style={styles.input}
              keyboardType="phone-pad"
            />
            {!!error && (
              <Text style={{ color: '#f44336', marginBottom: 12 }}>{error}</Text>
            )}
            <TouchableOpacity
              style={styles.button}
              onPress={handleCreate}
              disabled={submitting}
            >
              <Text style={styles.buttonText}>
                {submitting ? 'Отправка...' : 'Отправить на утверждение'}
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.button, styles.buttonSecondary]}
              onPress={() => setShowCreate(false)}
            >
              <Text style={[styles.buttonText, { color: '#666' }]}>Отмена</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      <Modal visible={showModeration} animationType="slide" transparent>
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContent, { maxHeight: '80%' }]}>
            <Text style={styles.modalTitle}>Объявления на модерацию</Text>
            {loading ? (
              <ActivityIndicator size="large" color="#2196F3" />
            ) : (
              <FlatList
                data={ads}
                keyExtractor={(item: any) => item.id.toString()}
                renderItem={({ item }: { item: any }) => (
                  <View style={styles.adBlock}>
                    <Text style={{ fontWeight: 'bold', fontSize: 16, marginBottom: 8 }}>
                      {item.text}
                    </Text>
                    <Text style={{ color: '#666', marginBottom: 4 }}>
                      Телефон: {item.phone}
                    </Text>
                    <Text style={{ color: '#666', marginBottom: 12 }}>
                      Отправитель: {item.User?.name || '—'} ({item.User?.email || '—'})
                    </Text>
                    <View style={{ flexDirection: 'row' }}>
                      <TouchableOpacity
                        style={styles.approveBtn}
                        onPress={() => handleApprove(item.id)}
                      >
                        <Text style={{ color: '#fff' }}>Утвердить</Text>
                      </TouchableOpacity>
                      <TouchableOpacity
                        style={styles.rejectBtn}
                        onPress={() => handleReject(item.id)}
                      >
                        <Text style={{ color: '#fff' }}>Отклонить</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                )}
              />
            )}
            <TouchableOpacity
              style={[styles.button, styles.buttonSecondary]}
              onPress={() => setShowModeration(false)}
            >
              <Text style={[styles.buttonText, { color: '#666' }]}>Закрыть</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </ScrollView>
  );
}
